// Helper para formatear cuant√≠a con separador de miles
const formatCurrency = (value) => {
  if (typeof value === 'number') {
    return value.toLocaleString('es-CO');
  }
  if (typeof value === 'string' && value.match(/^\d+$/)) {
    return parseInt(value, 10).toLocaleString('es-CO');
  }
  return value || '{cuantia}';
};

import React, { useState, useEffect } from 'react'
import { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs'
import { RefreshCw } from 'lucide-react'

const StyledEditor = ({ formData = {}, caseType = "", tabContents = {}, onTabContentChange, onImagesChange }) => {
  const [activeTab, setActiveTab] = useState("informacion-empresa");
  const [forceRegenerate, setForceRegenerate] = useState(0);
  const [images, setImages] = useState([]);

  const handleRegenerateContent = () => {
    if (onTabContentChange) {
      onTabContentChange('fundamentos', generateTabContent("Fundamentos de Derecho"));
      onTabContentChange('anexos', getDefaultAnexosContent(formData));
      onTabContentChange('firma', generateTabContent("Firma"));
    }
  };

  const handleTabContentChange = (tabId, content) => {
    if (onTabContentChange) {
      onTabContentChange(tabId, content);
    }
  };

  // Funci√≥n para manejar la subida de im√°genes
  const handleImageUpload = (event) => {
    const files = Array.from(event.target.files);
    
    files.forEach((file) => {
      if (file.type.startsWith('image/')) {
        const reader = new FileReader();
        reader.onload = (e) => {
          const imageData = {
            id: Date.now() + Math.random(), // ID √∫nico
            name: file.name,
            data: e.target.result, // Base64 data URL (data:image/...;base64,...)
            file: file, // Archivo original para docxtemplater
            width: 100, // Ancho por defecto
            height: 300 // Alto por defecto
          };
          
          console.log('Nueva imagen agregada:', {
            name: imageData.name,
            dataLength: imageData.data.length,
            dataPreview: imageData.data.substring(0, 50) + '...'
          });
          
          setImages(prev => {
            const newImages = [...prev, imageData];
            // Notificar al componente padre sobre los cambios
            if (onImagesChange) {
              onImagesChange(newImages);
            }
            return newImages;
          });
        };
        reader.readAsDataURL(file); // Esto genera data:image/...;base64,...
      }
    });
    
    // Limpiar el input
    event.target.value = '';
  };

  // Funci√≥n para eliminar una imagen
  const handleRemoveImage = (imageId) => {
    setImages(prev => {
      const newImages = prev.filter(img => img.id !== imageId);
      if (onImagesChange) {
        onImagesChange(newImages);
      }
      return newImages;
    });
  };

  // Funci√≥n para actualizar dimensiones de imagen
  const handleImageDimensionChange = (imageId, dimension, value) => {
    setImages(prev => {
      const newImages = prev.map(img => 
        img.id === imageId 
          ? { ...img, [dimension]: parseInt(value) || 0 }
          : img
      );
      if (onImagesChange) {
        onImagesChange(newImages);
      }
      return newImages;
    });
  };

  const tabs = [
    { id: "informacion-empresa", label: "Informaci√≥n Empresa", readOnly: true },
    { id: "asunto", label: "Asunto", readOnly: true },
    { id: "solicitud", label: "Solicitud", readOnly: true },
    { id: "hechos", label: "Hechos", readOnly: false }, // NUEVA SECCI√ìN EDITABLE
    { id: "fundamentos", label: "Fundamentos de Derecho", readOnly: true },
    { id: "notificaciones", label: "Notificaciones", readOnly: true },
    { id: "anexos", label: "Anexos", readOnly: false },
  ];

  const getTabContent = (tabId) => {
    switch (tabId) {
      case "informacion-empresa":
        return generateInformacionEmpresa(formData);
      case "asunto":
        return `JORGE ARMANDO LASSO DUQUE, identificado como aparece al pie de mi firma, obrando en calidad de Representante Legal General de la compa√±√≠a SEGUROS GENERALES SURA S.A., de conformidad con el poder otorgado mediante Escritura P√∫blica No. 392 del 12 de abril de 2016, Clausula Primera, Numeral (5), presento RECLAMACI√ìN FORMAL por el pago de perjuicios, con fundamento en los siguientes:`;
      case "solicitud": {
        const nombreEmpresa = formData?.nombreEmpresa || '{nombreEmpresa}';
        const cuantia = formatCurrency(formData?.cuantia);
        return `De manera respetuosa solicitamos que ${nombreEmpresa} cancele a favor de Seguros Generales Sura S.A. la suma de $ ${cuantia} en virtud de la subrogaci√≥n consignada en el art√≠culo 1096 del C√≥digo de Comercio.`;
      }
      case "hechos":
        return tabContents.hechos || generateHechosContent(formData);
      case "fundamentos":
        return generateFundamentosContent(formData);
      case "notificaciones":
        return `Es inter√©s de Seguros Generales Suramericana S.A. poder invitarlo a que podamos materializar un acuerdo beneficioso para ambas partes que evite desgastes administrativos y judiciales para ambas partes, por lo anterior en caso de que resulte de su inter√©s poder que realicemos acercamientos al respecto, nos permitimos informarle que el recobro del presente siniestro ha sido asignado a la firma de abogados externos BTL Legal Group S.A.S. ubicada en la Avenida 6AN 25N ‚Äì 22 Piso Tercero, Cali - Valle del Cauca y con n√∫meros de tel√©fonos 6686611, , WhatsApp 323 6214498 y correo electr√≥nico subrogacion10@btllegalgroup.com. Empresa con la cual podr√° comunicarse en caso de que resulte de su inter√©s poder llegar a un acuerdo para zanjar la presente controversia.`;
      case "anexos":
        return tabContents.anexos || getDefaultAnexosContent(formData);
      default:
        return generateTabContent("Contenido");
    }
  };

  return (
    <div className="w-full h-full flex flex-col">
      <Tabs value={activeTab} onValueChange={setActiveTab} className="h-full flex flex-col">
        <div className="border-b border-gray-200 bg-white px-4 py-2">
          <TabsList className="w-full h-12 bg-gray-50">
            {tabs.map((tab) => (
              <TabsTrigger
                key={tab.id}
                value={tab.id}
                className="flex-1 text-xs font-medium"
              >
                {tab.label}
                {tab.readOnly && <span className="ml-1 text-gray-400">(Vista)</span>}
              </TabsTrigger>
            ))}
          </TabsList>
        </div>

        {tabs.map((tab) => (
          <TabsContent key={tab.id} value={tab.id} className="flex-1 overflow-hidden">
            <div className="h-full flex flex-col">
              {tab.readOnly ? (
                // Vista de solo lectura
                <div className="bg-gray-50 border border-gray-200 rounded-lg shadow-sm overflow-y-auto flex-1 p-6">
                  <div className="max-w-none prose prose-sm">
                    <pre className="whitespace-pre-wrap font-sans text-sm leading-relaxed text-gray-800">
                      {getTabContent(tab.id)}
                    </pre>
                  </div>
                </div>
              ) : (
                // Editor editable con textarea
                <div className="bg-white border border-gray-200 rounded-lg shadow-sm overflow-hidden flex-1 flex flex-col">
                  {/* Toolbar */}
                  <div className="bg-white border-b border-gray-200 p-3 flex justify-between items-center">
                    <button
                      onClick={handleRegenerateContent}
                      className="inline-flex items-center justify-center w-8 h-8 rounded-md transition-all duration-200 border border-gray-200 hover:bg-gray-100 text-gray-600 hover:border-gray-300"
                      title="Regenerar contenido desde formulario"
                    >
                      <RefreshCw size={14} />
                    </button>
                    
                    {/* Bot√≥n para subir im√°genes solo en la tab de Hechos */}
                    {tab.id === 'hechos' && (
                      <div className="flex items-center gap-2">
                        <input
                          type="file"
                          accept="image/*"
                          multiple
                          onChange={handleImageUpload}
                          className="hidden"
                          id="image-upload"
                        />
                        <label
                          htmlFor="image-upload"
                          className="inline-flex items-center px-3 py-1 text-xs font-medium rounded-md border border-gray-200 bg-white hover:bg-gray-50 cursor-pointer transition-colors"
                        >
                          üì∑ Subir Im√°genes
                        </label>
                      </div>
                    )}
                  </div>
                  
                  {/* Contenedor principal con textarea y panel de im√°genes */}
                  <div className="flex-1 flex">
                    {/* Textarea */}
                    <textarea
                      value={getTabContent(tab.id)}
                      onChange={(e) => handleTabContentChange(tab.id, e.target.value)}
                      className="flex-1 p-6 resize-none border-none outline-none font-sans text-sm leading-relaxed text-gray-800"
                      placeholder={`Escriba el contenido para ${tab.label}...`}
                      style={{
                        minHeight: '500px',
                        fontFamily: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif'
                      }}
                    />
                    
                    {/* Panel de im√°genes solo para la tab de Hechos */}
                    {tab.id === 'hechos' && images.length > 0 && (
                      <div className="w-80 border-l border-gray-200 bg-gray-50 p-4 overflow-y-auto">
                        <h3 className="text-sm font-medium text-gray-900 mb-3">Im√°genes ({images.length})</h3>
                        <div className="space-y-4">
                          {images.map((image) => (
                            <div key={image.id} className="bg-white rounded-lg border border-gray-200 p-3">
                              {/* Preview de la imagen */}
                              <div className="mb-2">
                                <img
                                  src={image.data}
                                  alt={image.name}
                                  className="w-full h-32 object-cover rounded border"
                                />
                              </div>
                              
                              {/* Nombre del archivo */}
                              <p className="text-xs text-gray-600 mb-2 truncate" title={image.name}>
                                {image.name}
                              </p>
                              
                              {/* Controles de dimensiones */}
                              {/* <div className="grid grid-cols-2 gap-2 mb-2">
                                <div>
                                  <label className="text-xs text-gray-500">Ancho</label>
                                  <input
                                    type="number"
                                    value={image.width}
                                    onChange={(e) => handleImageDimensionChange(image.id, 'width', e.target.value)}
                                    className="w-full px-2 py-1 text-xs border border-gray-200 rounded"
                                    min="50"
                                    max="800"
                                  />
                                </div>
                                <div>
                                  <label className="text-xs text-gray-500">Alto</label>
                                  <input
                                    type="number"
                                    value={image.height}
                                    onChange={(e) => handleImageDimensionChange(image.id, 'height', e.target.value)}
                                    className="w-full px-2 py-1 text-xs border border-gray-200 rounded"
                                    min="50"
                                    max="600"
                                  />
                                </div>
                              </div> */}
                              
                              {/* Bot√≥n para eliminar */}
                              <button
                                onClick={() => handleRemoveImage(image.id)}
                                className="w-full px-2 py-1 text-xs text-red-600 border border-red-200 rounded hover:bg-red-50 transition-colors"
                              >
                                Eliminar
                              </button>
                            </div>
                          ))}
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              )}
            </div>
          </TabsContent>
        ))}
      </Tabs>
    </div>
  )
}

// Funci√≥n para generar contenido de la tab "Informaci√≥n Empresa" (solo vista)
const generateInformacionEmpresa = (formData = {}) => {
  const formatValue = (value, defaultText = '') => {
    return value && value.toString().trim() ? value.toString().trim() : defaultText;
  };

  // Obtener fecha actual formateada
  const fechaActual = new Date();
  const monthNames = [
    'enero', 'febrero', 'marzo', 'abril', 'mayo', 'junio',
    'julio', 'agosto', 'septiembre', 'octubre', 'noviembre', 'diciembre'
  ];

  const diaActual = fechaActual.getDate();
  const mesActual = monthNames[fechaActual.getMonth()];
  const a√±oActual = fechaActual.getFullYear();

  // Datos de la empresa
  const nombreEmpresa = formatValue(formData.nombreEmpresa, '{nombreEmpresa}');
  const nitEmpresa = formatValue(formData.nitEmpresa, '{nitEmpresa}');
  const direccionEmpresa = formatValue(formData.direccionEmpresa, '{direccionEmpresa}');
  const correoEmpresa = formatValue(formData.correoEmpresa, '{correoEmpresa}');
  const telefonoEmpresa = formatValue(formData.telefonoEmpresa, '{telefonoEmpresa}');
  const cuantia = formatCurrency(formData.cuantia);

  return `Santiago de Cali, ${diaActual} de ${mesActual} del ${a√±oActual}

Se√±ores:
${nombreEmpresa}
NIT. ${nitEmpresa}
${direccionEmpresa}
${correoEmpresa}
${telefonoEmpresa}`;
};

// Contenido por defecto para las tabs editables
const generateTabContent = (tabName) => {
  return `${tabName}

Contenido de ${tabName}. Complete el formulario en el panel izquierdo para generar autom√°ticamente el contenido de esta secci√≥n.

Puede editar este contenido seg√∫n sea necesario.`;
};

// NUEVA FUNCI√ìN PARA FUNDAMENTOS DE DERECHO
const generateFundamentosContent = (formData = {}) => {
  const numeroPoliza = formData.numeroPolizaSura || '{numeroPolizaSura}';
  const placasPrimerVehiculo = formData.placasPrimerVehiculo || '{placasPrimerVehiculo}';
  const placasSegundoVehiculo = formData.placasSegundoVehiculo || '{placasSegundoVehiculo}';
  const cuantia = formatCurrency(formData.cuantia);
  return `La subrogaci√≥n  \n\nLas entidades aseguradoras se ven obligadas al pago de las indemnizaciones que hayan sido pactadas en el contrato de seguro. No obstante, el C√≥digo de Comercio establece la posibilidad que asiste a la aseguradora de realizar el recobro de este pago a quien haya sido responsable del da√±o resarcido: "El asegurador que pague una indemnizaci√≥n se subrogar√°, por ministerio de la ley y hasta concurrencia de su importe, en los derechos del asegurado contra las personas responsables del siniestro."[ C√≥digo Comercial Colombiano (CCo) Decreto 410 de 1971. Art√≠culo 1096. Marzo 27 de 1971 (Colombia).]\n\nLa Corte Suprema de Justicia ha desarrollado esta disposici√≥n legal de la siguiente manera:\n\nLa citada disposici√≥n permite establecer, que para el buen suceso de la ¬´acci√≥n subrogatoria¬ª, se debe acreditar que en virtud de un ¬´contrato de seguro¬ª, al haberse producido el ¬´siniestro¬ª, el asegurador efectu√≥ v√°lidamente el ¬´pago de la indemnizaci√≥n¬ª, de tal manera que por mandato legal se subroga en los derechos del afectado patrimonialmente con el riesgo amparado, pasando a ocupar su lugar o posici√≥n en la relaci√≥n jur√≠dica existente con el responsable o causante del hecho da√±oso.[ Corte Suprema de Justicia. Sala de Casaci√≥n Civil. Sentencia SC 003-2015. (M. P. Jes√∫s Vall de Rut√©n; 14 de enero de 2015).]\nEn consecuencia, a Seguros Generales Sura S.A. le asiste el derecho a recobrar el valor pagado por la reparaci√≥n del veh√≠culo asegurado, en virtud de la figura de la subrogaci√≥n, tanto frente al propietario como frente a la empresa de servicio p√∫blico por cumplirse los presupuestos jurisprudenciales:\n\na. Existe un contrato de seguro de autos soportado mediante la p√≥liza ${numeroPoliza}.\nb. Se produjo un accidente de tr√°nsito entre el veh√≠culo de placa ${placasPrimerVehiculo} y el veh√≠culo de placa ${placasSegundoVehiculo}, en el cual ha sido atribuida la responsabilidad al veh√≠culo de su propiedad.\nc. Seguros Generales Sura S.A. cancel√≥ el valor de la reparaci√≥n del veh√≠culo de placas $ ${cuantia}.\n\nResponsabilidad Civil Extracontractual por Actividades Peligrosas  \n\nEl art√≠culo 2341 del C√≥digo Civil establece que quien cometa un delito o culpa, y con ello le genere un da√±o a otro, se encuentra obligado a indemnizarlo, sin perjuicio de la pena principal que la ley imponga por la culpa o el delito cometido.\nEn lo que respecta puntualmente a la responsabilidad civil extracontractual por actividades peligrosas, esta se origina en el ejercicio de una actividad que genera un riesgo mayor al que normalmente est√°n expuestas las personas. Al respecto, la jurisprudencia de la Sala Civil de la Corte Suprema de Justicia ha definido en forma pac√≠fica que la conducci√≥n de veh√≠culos automotores es una actividad considerada como peligrosa. Lo anterior, debido al alto nivel de riesgo que implica su ejercicio.\nAhora bien, en concordancia con el desarrollo jurisprudencial colombiano, con base en art√≠culos como el 2356 (presunci√≥n de culpa en actividades peligrosas), 2347 y 2349 del C√≥digo civil (Responsabilidad indirecta por el hecho de empleado o personas a cargo) se establece todo un r√©gimen de responsabilidad aplicado no solo a la persona principal que ejerce el hecho da√±oso sino a terceros que tienen un deber de guarda o dominio y son solidariamente responsables en casos espec√≠ficos.\nDe esta forma, La Corte Suprema de Justicia, en la Sentencia del 13 de marzo de 2008 (Exp. 9327), reafirm√≥ que la responsabilidad en casos de actividades peligrosas, recae sobre quien ostenta la condici√≥n de guardi√°n, es decir, quien detenta el poder de mando, direcci√≥n y control sobre la actividad en el momento en que ocurre el da√±o.\nAsimismo, seg√∫n la doctrina establecida en la Sentencia del 22 de abril de 1997 (Exp. 5743), la responsabilidad no se desplaza autom√°ticamente con la venta del veh√≠culo o la externalizaci√≥n de la actividad, si la empresa contin√∫a obteniendo un beneficio econ√≥mico de la misma. Ahora bien pese a no ser la propietaria directa del veh√≠culo involucrado en el siniestro o la actividad principal de la empresa no sea el transporte, mantiene un claro v√≠nculo econ√≥mico con la actividad que gener√≥ el da√±o, toda vez que, asi la entidad no tenga como actividad principal el transporte, utiliza veh√≠culos en sus operaciones y sigue obteniendo beneficios de esta actividad, generando as√≠ la actividad peligrosa. Este v√≠nculo econ√≥mico no la exime de responsabilidad, ya que, conforme a la doctrina expuesta por la Corte Suprema, la simple transferencia de la propiedad o la tercerizaci√≥n de la actividad no desplaza autom√°ticamente la responsabilidad civil, si la empresa responsable sigue benefici√°ndose de la operaci√≥n que ocasion√≥ el perjuicio.\nEn conclusi√≥n, en el contexto de la responsabilidad civil extracontractual en Colombia, tanto la jurisprudencia de la Corte Suprema como la normativa vigente establecen que la responsabilidad por da√±os en actividades peligrosas recae sobre quienes detentan el control, direcci√≥n y obtienen un beneficio econ√≥mico de la actividad, independientemente de la propiedad directa de los bienes involucrados. Las empresas que conservan influencia y provecho econ√≥mico en actividades riesgosas, como la operaci√≥n de veh√≠culos  pueden ser solidariamente responsables por los da√±os causados, debiendo responder por ellos.\n\nLa responsabilidad de la empresa de transportes  \n\nLa afiliaci√≥n de veh√≠culos automotores a una empresa prestadora del servicio p√∫blico de transporte conlleva una serie de responsabilidades de car√°cter legal, establecidas en la Ley 336 de 1996. El art√≠culo 36 de esta norma establece: "Los conductores de los equipos destinados al servicio p√∫blico de transporte ser√°n contratados directamente por la empresa operadora de transporte, quien para todos los efectos ser√° solidariamente responsable junto con el propietario del equipo."[ Ley 336 de 1996. Por la cual se adopta el estatuto nacional de transporte. Diciembre 20 de 1996.]\n\nLa responsabilidad solidaria planteada en estos t√©rminos implica que la empresa de transporte deber√° responder por los cr√©ditos en cabeza de cualquiera de sus conductores, derivados de la ejecuci√≥n de la actividad de transporte. Por lo tanto, este fundamento legal activa la posibilidad de efectuar el cobro directo a la empresa de transporte cuando los perjuicios ocasionados a un tercero sean producto de la responsabilidad de uno de sus veh√≠culos afiliados. Por lo tanto, solicitamos de manera respetuosa que se acojan a nuestras pretensiones.`;
};

export const getDefaultAnexosContent = (formData = {}) => {
  const numeroPoliza = formData.numeroPolizaSura || '{numeroPolizaSura}';
  return `1. Aviso de siniestro de p√≥liza ${numeroPoliza} expedida por Seguros Generales Sura S.A.\n\n2. Registro fotogr√°fico dispuesto en el Art√≠culo 16 de la Ley 2251 del 2022 / IPAT.\n\n3. Constancia de pago de da√±os materiales del veh√≠culo asegurado por Sura S.A.\n\n4. Copia simple de la Escritura P√∫blica No. 392 del 12 de abril de 2016, a trav√©s del cual se otorga la representaci√≥n legal general al suscrito.`;
};

// NUEVA FUNCI√ìN PARA GENERAR EL CONTENIDO POR DEFECTO DE LA SECCI√ìN HECHOS
const generateHechosContent = (formData = {}) => {
  const diaAccidente = formData.diaAccidente || '{diaAccidente}';
  const mesAccidente = formData.mesAccidente || '{mesAccidente}';
  const a√±oAccidente = formData.a√±oAccidente || '{a√±oAccidente}';
  const direccionAccidente = formData.direccionAccidente || '{direccionAccidente}';
  const ciudad = formData.ciudad || '{ciudad}';
  const departamento = formData.departamento || '{departamento}';
  const placasPrimerVehiculo = formData.placasPrimerVehiculo || '{placasPrimerVehiculo}';
  const propietarioPrimerVehiculo = formData.propietarioPrimerVehiculo || '{propietarioPrimerVehiculo}';
  const placasSegundoVehiculo = formData.placasSegundoVehiculo || '{placasSegundoVehiculo}';
  
  // L√≥gica para combinar propietario y afiliador
  const propietarioSegundoVehiculo = formData.propietarioSegundoVehiculo?.trim() || '';
  const afiliador = formData.afiliador?.trim() || '';
  
  let propietarioYAfiliador;
  if (propietarioSegundoVehiculo && afiliador) {
    propietarioYAfiliador = `${propietarioSegundoVehiculo} - ${afiliador}`;
  } else if (propietarioSegundoVehiculo) {
    propietarioYAfiliador = propietarioSegundoVehiculo;
  } else if (afiliador) {
    propietarioYAfiliador = afiliador;
  } else {
    propietarioYAfiliador = '{propietarioSegundoVehiculo}';
  }
  
  const conductorVehiculoInfractor = formData.conductorVehiculoInfractor || '{conductorVehiculoInfractor}';
  const cedulaConductorInfractor = formData.cedulaConductorInfractor || '{cedulaConductorInfractor}';
  const numeroPolizaSura = formData.numeroPolizaSura || '{numeroPolizaSura}';
  const cuantia = formatCurrency(formData.cuantia);
  return `
1. El ${diaAccidente} de ${mesAccidente} del ${a√±oAccidente} en la ${direccionAccidente}, de la ciudad de ${ciudad}, ${departamento}; se present√≥ un accidente de tr√°nsito entre el veh√≠culo de placas ${placasPrimerVehiculo} de propiedad de ${propietarioPrimerVehiculo} y el veh√≠culo de placas ${placasSegundoVehiculo} de propiedad de ${propietarioYAfiliador} conducido por ${conductorVehiculoInfractor} identificado con c√©dula de ciudadan√≠a ${cedulaConductorInfractor}.\n
2. Derivado del mentado accidente se levant√≥ la evidencia fotogr√°fica conforme a lo previsto en el art√≠culo 16 de la Ley 2251 del 2022, donde se atribuye la responsabilidad al conductor del veh√≠culo de placas ${placasSegundoVehiculo}.\n
3. El veh√≠culo de placas ${placasPrimerVehiculo} se encontraba asegurado al momento del accidente por la p√≥liza de seguros ${numeroPolizaSura} expedida por Seguros Generales Suramericana.\n
4. Producto del accidente de tr√°nsito Seguros Generales Sura S.A. cancel√≥ la suma de $ ${cuantia} por concepto de reparaci√≥n de los da√±os materiales sufridos al veh√≠culo de placas ${placasPrimerVehiculo}.`;
};

export default StyledEditor;
